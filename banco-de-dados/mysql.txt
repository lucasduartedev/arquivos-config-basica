Caderno MySQL


Tipos Primitivos
NUMÉRICO	INTEIRO	TinyInt, SmallInt, Int, MediumInt, BigInt
	REAL	Decimal, float, Double, Real
	LÓGICO	Bit, Boolean
DATA/TEMPO		Date, DateTime, TimeStamp, Time, Year
LITERAL	CARACTERE	Char, Varchar
	TEXTO	TinyText, Text, MediumText, LongText
	BINÁRIO	TinyBlob, Blob, MediumBlob, LongBlob
	COLEÇÃO	Enum, Set
ESPACIAL		Geometry, Point, Polygon, MultiPolygon


Categorias
DDL	Data Definition Language
DML	Data Manipulation Language
DQL	Data Query Language


- Criar Base de Dados
create database nomeDoBancoDeDados
| default character set utf8
\ default collate utf8_general_ci;

- Criar Tabela
Create table nomeDaTabela();
| foreing key ('colunaDessaTabela')
\ references tabelaEstrangeira (coluna)
\ default charset = utf8

- Alterar Tabela
alter table nomeDaTabela
| rename to nomeNovoDaTabela
| add column nomeDaColuna tipos(...);
| after colunaExistente
| first
\ add foreing key (colunaDessaTabela)
  \ references 'tabela'('coluna');
| modify column nomedaColuna tipos(...);
| change column nomeAtualDaColuna novoNome tipos(...)
\ drop column nomeCula;

- Editar registro
Update nomeTabela
\ set nomeColuna = valor
  \ where CONDIÇÃO

- Apagar registro
delete from nomeDaTabela
\ where nomeColuna = 'registroDeReferência';

- Apagar todos os registros
truncate nomeDaTabela

- Clausulas
select nomeDaColuna from nomeDaTabela;
\ where condicaoDesejada;
  | order by nomeDasColunas;
  | group by 'coluna'
  | between 'coluna' and 'coluna';
  | in (valoresEspecificos);
  | like '%condicao%'; 

- Selecionar
select ... from 'tabela';
| having 
| distinct 'coluna'
| count 'coluna ou *'
| max(coluna)
| min(coluna)
| sum(coluna)
| avg(coluna)

- JOIN
select 'tabela'.'coluna, ...
\ from 'tabela' join 'outraTabela'
  \ on 'tabelaEstrangeira'.'pk' == 'tabela'.'pk';

- Criar Procedimentos (atualizar)
create procedure nomeProcedimento (parâmetros) declarações;

Exemplo:
create procedure verNomeCompleto (varNome bigInt)
select concat(‘O nome é ‘, nomeColuna) as nomeQualquer
from nomeTabela
where idNome = varNome;

- Invocar procedimento
Call nomeProcedimento(parâmetro);

- Apagar procedimento
drop procedure nomeProcedimento;

- Criar função
CREATE FUNCTION fn_nome_funcao ()
RETURNS
RETURN parâmetros para retornar

- Invocar função
SELECT fn_nome_funcao () AS nome_desejado;
